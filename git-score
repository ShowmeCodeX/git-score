#!/usr/bin/env python
#
# git-score -- aggregate git commit statistics
#
# Author: Juan Batiz-Benet
# Author: Matt Sparks
import re
import subprocess
import sys


STAT_PATTERN = (r'^\s*(\d+) files changed, (\d+) insertions\(\+\), '
                r'(\d+) deletions\(\-\)$')

FILE_PATTERN =  r'^\s*(\d+)\t(\d+)\t(.*)$'

# Truncate long author names to this size.
MAX_NAME_LENGTH = 45


class CommitStats(object):
  def __init__(self, author):
    self._author = author
    self._added = 0
    self._removed = 0
    self._commits = 0
    self._order = "-delta"

  def __cmp__(self, other):
    '''Comparison method for sorting. The field to sort by can be specified.
    By default, larger deltas are ordered first.'''
    field = self._order[1:]
    ascending = self._order[0] == '+'

    if ascending:
      return cmp(getattr(self, field)(), getattr(other, field)())
    return cmp(getattr(other, field)(), getattr(self, field)())

  def sortBy(self, order):
    if order[0] in ['-','+']:
      field = order[1:]
      ascending = order[0] == '+'
    else:
      field = order
      ascending = None  # None here so we can set defaults after field adjust.

    # adjust fields to use
    if field == 'author':
      field = '_authorlower'
    elif field == '(+)':
      field = 'added'
    elif field == '(-)':
      field = 'removed'

    # all default to descending, except author
    if ascending == None:
      ascending = field == '_authorlower'

    ascendingSign = '+' if ascending else '-'

    if hasattr(self, field):
      self._order = '%c%s' % (ascendingSign, field)

  def _authorlower(self):
    '''Returns author name in lowercase. For sorting.'''
    return self._author.lower()

  def author(self):
    '''Returns author name.'''
    return self._author

  def commits(self):
    '''Returns number of total commits.'''
    return self._commits

  def added(self):
    '''Returns number of lines added over all commits.'''
    return self._added

  def removed(self):
    '''Returns number of lines removed over all commits.'''
    return self._removed

  def delta(self):
    '''Returns delta of lines added and removed.'''
    return self._added - self._removed

  def commitNew(self):
    '''Records a new commit.'''
    self._commits += 1

  def commitAddChanges(self, added, removed):
    '''Records changes. Does not record a new commit.

    Args:
      added: number of lines added in this commit
      removed: number of lines removed in this commit

    Returns:
      None
    '''
    self._added += int(added)
    self._removed += int(removed)

class GitColor(object):
  '''Gets and uses current git settings to color output.'''
  _colorIsOn = None

  @classmethod
  def gitColorIsOn(cls):
    '''Returns whether git config color.ui is on. Only queries once.'''
    if cls._colorIsOn is not None:
      return cls._colorIsOn

    cmd = ['git', 'config', 'color.ui']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    next = proc.stdout.readline().strip()
    next = 'auto' if next == '' else next
    cls._colorIsOn = next in ['true', 'always', 'auto']
    return cls._colorIsOn

  @classmethod
  def red(cls, text):
    '''Returns text, in red if color is on.'''
    if cls.gitColorIsOn():
      return "\033[31m%s\033[0m" % text
    return text

  @classmethod
  def green(cls, text):
    '''Returns text, in green if color is on.'''
    if cls.gitColorIsOn():
      return '\033[32m%s\033[0m' % text
    return text


def parseGitLogData(stream, include=None, exclude=None, sortby=None):
  stat_pattern = re.compile(STAT_PATTERN)
  file_pattern = re.compile(FILE_PATTERN)
  exclude_pattern = re.compile(exclude) if exclude else None
  include_pattern = re.compile(include) if include else None

  stats = {}

  for line in stream:
    line = line.strip()
    if line == '':
      continue  # skip blank lines

    # Author line, record new commit.
    if line.startswith('+'):
      author = line[1:]  # remove leading '+'
      if author not in stats:
        stats[author] = CommitStats(author)
        if sortby:
          stats[author].sortBy(sortby)
      stats[author].commitNew()

    # File line, record per-file changes.
    elif exclude or include:
      match = file_pattern.match(line)
      if match and author in stats:
        added, removed, filename = match.group(1, 2, 3)
        exclude_file = exclude and exclude_pattern.match(filename)
        include_file = not include or include_pattern.match(filename)
        if include_file and not exclude_file:
          stats[author].commitAddChanges(added, removed)

    # Summary line, record changes.
    else:
      match = stat_pattern.match(line)
      if match and author in stats:
        files, added, removed = match.group(1, 2, 3)
        stats[author].commitAddChanges(added, removed)

  return stats


def gitStats(log_args, **kwds):
  use_numstat = 'include' in kwds or 'exclude' in kwds
  stat = '--numstat' if use_numstat else '--shortstat'
  cmd = ['git', 'log', stat, '--pretty=format:+%an <%ae>']
  cmd.extend(log_args)
  proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
  return parseGitLogData(proc.stdout, **kwds)


def main():
  params = {}
  log_args = []

  # TODO(msparks): this should use optparse.
  for arg in sys.argv[1:]:  # look at incoming arguments, to see if we need any
    if arg.startswith('--exclude-files='):
      params['exclude'] = r'%s' % arg[len('--exclude-files='):]
    elif arg.startswith('--include-files='):
      params['include'] = r'%s' % arg[len('--include-files='):]
    elif arg.startswith('--sortby='):
      params['sortby'] = arg[len('--sortby='):]
    else:
      log_args.append(arg)

  stats = gitStats(log_args, **params)

  if not stats:
    print 'no commits'
    sys.exit(0)

  # Find length of longest author name.
  max_author_length = max([len(x) for x in stats.keys()])
  max_author_length = min(max_author_length, MAX_NAME_LENGTH)

  print 'author%s\tcommits\tdelta\t(+)\t(-)' % (' ' * (max_author_length - 6))
  for author_stats in sorted(stats.values()):
    author = author_stats.author()[0:MAX_NAME_LENGTH]
    name_field = '%s%s' % (author, ' ' * (max_author_length - len(author)))
    values = {'name': name_field,
              'commits': author_stats.commits(),
              'delta': author_stats.delta(),
              'added': GitColor.green(author_stats.added()),
              'removed': GitColor.red(author_stats.removed())}

    print '%(name)s\t%(commits)d\t%(delta)d\t%(added)s\t%(removed)s' % values


if __name__ == '__main__':
  main()