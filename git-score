#!/usr/bin/env python
#
# git-score -- aggregate git commit statistics
#
# Author: Juan Batiz-Benet
# Author: Matt Sparks
import re
import subprocess
import sys


STAT_PATTERN = (r'^\s*(\d+) files changed, (\d+) insertions\(\+\), '
                r'(\d+) deletions\(\-\)$')

# Truncate long author names to this size.
MAX_NAME_LENGTH = 45


class CommitStats(object):
  def __init__(self, author):
    self._author = author
    self._added = 0
    self._removed = 0
    self._commits = 0

  def __cmp__(self, other):
    '''Comparison method. For sorting. Larger deltas are ordered first.'''
    return cmp(other.delta(), self.delta())

  def author(self):
    '''Returns author name.'''
    return self._author

  def commits(self):
    '''Returns number of total commits.'''
    return self._commits

  def added(self):
    '''Returns number of lines added over all commits.'''
    return self._added

  def removed(self):
    '''Returns number of lines removed over all commits.'''
    return self._removed

  def delta(self):
    '''Returns delta of lines added and removed.'''
    return self._added - self._removed

  def commitNew(self, added, removed):
    '''Records a new commit.

    Args:
      added: number of lines added in this commit
      removed: number of lines removed in this commit

    Returns:
      None
    '''
    self._added += int(added)
    self._removed += int(removed)
    self._commits += 1

class GitColor(object):
  '''Gets and uses current git settings to color output.'''
  _colorIsOn = None

  @classmethod
  def gitColorIsOn(cls):
    '''Returns whether git config color.ui is on. Only queries once.'''
    if cls._colorIsOn is not None:
      return cls._colorIsOn

    cmd = ['git', 'config', 'color.ui']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    next = proc.stdout.next().strip()
    cls._colorIsOn = next in ['true', 'always', 'auto']
    return cls._colorIsOn

  @classmethod
  def red(cls, text):
    '''Returns text, in red if color is on'''
    if cls.gitColorIsOn():
      return "\033[31m%s\033[0m" % text
    return text

  @classmethod
  def green(cls, text):
    '''Returns text, in green if color is on'''
    if cls.gitColorIsOn():
      return "\033[32m%s\033[0m" % text
    return text


def parseGitLogData(stream):
  pattern = re.compile(STAT_PATTERN)
  stats = {}

  for line in stream:
    line = line.strip()
    if line == '':
      continue  # skip blank lines

    if line.startswith('+'):
      author = line[1:]  # remove leading '+'
      if author not in stats:
        stats[author] = CommitStats(author)
    else:
      match = pattern.match(line)
      if match and author in stats:
        files, added, removed = match.group(1, 2, 3)
        stats[author].commitNew(added, removed)

  return stats


def main():
  cmd = ['git', 'log', '--shortstat', '--pretty=format:+%an <%ae>']
  cmd.extend(sys.argv[1:])
  proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
  stats = parseGitLogData(proc.stdout)

  if not stats:
    print 'no commits'
    sys.exit(0)

  # Find length of longest author name.
  max_author_length = max([len(x) for x in stats.keys()])
  max_author_length = min(max_author_length, MAX_NAME_LENGTH)

  print 'author%s\tcommits\tdelta\t(+)\t(-)' % (' ' * (max_author_length - 6))
  for author_stats in sorted(stats.values()):
    author = author_stats.author()[0:MAX_NAME_LENGTH]
    name_field = '%s%s' % (author, ' ' * (max_author_length - len(author)))
    values = {'name': name_field,
              'commits': author_stats.commits(),
              'delta': author_stats.delta(),
              'added': GitColor.green(author_stats.added()),
              'removed': GitColor.red(author_stats.removed())}

    print '%(name)s\t%(commits)d\t%(delta)d\t%(added)s\t%(removed)s' % values


if __name__ == '__main__':
  main()